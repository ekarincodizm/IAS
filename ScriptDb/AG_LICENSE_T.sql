/*
Navicat Oracle Data Transfer
Oracle Client Version : 11.2.0.3.0

Source Server         : AGDOI
Source Server Version : 90200
Source Host           : :1521
Source Schema         : AGDOI

Target Server Type    : ORACLE
Target Server Version : 90200
File Encoding         : 65001

Date: 2014-04-09 14:43:13
*/


-- ----------------------------
-- Table structure for AG_LICENSE_T
-- ----------------------------

CREATE TABLE "AGDOI"."AG_LICENSE_T" (
"LICENSE_NO" VARCHAR2(15 BYTE) NOT NULL ,
"LICENSE_DATE" DATE NULL ,
"EXPIRE_DATE" DATE NULL ,
"LICENSE_TYPE_CODE" VARCHAR2(2 BYTE) NULL ,
"REVOKE_LICENSE_DATE" DATE NULL ,
"REVOKE_TYPE_CODE" VARCHAR2(1 BYTE) NULL ,
"NEW_LICENSE_NO" VARCHAR2(15 BYTE) NULL ,
"LICENSE_ACTOR" VARCHAR2(100 BYTE) NULL ,
"DATE_LICENSE_ACT" DATE NULL ,
"CANCEL_REASON" VARCHAR2(300 BYTE) NULL ,
"RECORD_STATUS" VARCHAR2(1 BYTE) NULL ,
"USER_ID" VARCHAR2(15 BYTE) NULL ,
"USER_DATE" DATE NULL ,
"REMARK" VARCHAR2(500 BYTE) NULL ,
"UNIT_LINK" VARCHAR2(15 BYTE) NULL ,
"UNIT_LINK_STATUS" VARCHAR2(1 BYTE) NULL ,
"START_UL_DATE" DATE NULL ,
"EXPIRE_UL_DATE" DATE NULL ,
"UCOM_AGENT_ID" VARCHAR2(15 BYTE) NULL ,
"UCOM_REF_AGENT_ID" VARCHAR2(15 BYTE) NULL ,
"UCOM_COMP_ID" VARCHAR2(15 BYTE) NULL ,
"LICENSE_REP" VARCHAR2(15 BYTE) NULL ,
"U_TYPE" VARCHAR2(1 BYTE) NULL ,
"UNIT_LINK_RENEW" NUMBER(2) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "AGDOI"."AG_LICENSE_T" IS '??????????????/ ??????????????????-?????????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."LICENSE_NO" IS '????????????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."LICENSE_DATE" IS '????????????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."EXPIRE_DATE" IS '??????????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."LICENSE_TYPE_CODE" IS '??????????????????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."REVOKE_LICENSE_DATE" IS '?????????????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."REVOKE_TYPE_CODE" IS '????????????????????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."NEW_LICENSE_NO" IS '??????????????????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."LICENSE_ACTOR" IS '??????????????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."DATE_LICENSE_ACT" IS '?????????????????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."CANCEL_REASON" IS '?????????????????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."RECORD_STATUS" IS '??????????????  X = cancel ??????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."USER_ID" IS '?????????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."USER_DATE" IS '????????????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."REMARK" IS '????????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."UNIT_LINK" IS '???????????????????  U-Life';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."UNIT_LINK_STATUS" IS '?????  U-Life : A = ????, B = ???????';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."START_UL_DATE" IS '????????????????? U-Life';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."EXPIRE_UL_DATE" IS '?????????????  U-Life';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."LICENSE_REP" IS '?????????? ??????????????? (RRRRXXXXXX)';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."U_TYPE" IS '?????????????? U-Life';
COMMENT ON COLUMN "AGDOI"."AG_LICENSE_T"."UNIT_LINK_RENEW" IS '??????????  U-Life ???????? ';

-- ----------------------------
-- Indexes structure for table AG_LICENSE_T
-- ----------------------------
CREATE INDEX "AGDOI"."AGIN_LICENSE_DATE_ACT"
ON "AGDOI"."AG_LICENSE_T" ("DATE_LICENSE_ACT" ASC)
LOGGING;
CREATE INDEX "AGDOI"."AGIN_LICENSE_LICENSE_TYPE"
ON "AGDOI"."AG_LICENSE_T" ("LICENSE_TYPE_CODE" ASC)
LOGGING;
CREATE INDEX "AGDOI"."AGIN_LICENSE_NEW_LICENSE"
ON "AGDOI"."AG_LICENSE_T" ("NEW_LICENSE_NO" ASC)
LOGGING;
CREATE INDEX "AGDOI"."AGIN_LICENSE_REVOKE"
ON "AGDOI"."AG_LICENSE_T" ("REVOKE_TYPE_CODE" ASC)
LOGGING;
CREATE INDEX "AGDOI"."AGIN_UCOM_AGENT_ID"
ON "AGDOI"."AG_LICENSE_T" ("UCOM_AGENT_ID" ASC)
LOGGING;
CREATE INDEX "AGDOI"."AGIN_UCOM_COMP_ID"
ON "AGDOI"."AG_LICENSE_T" ("UCOM_COMP_ID" ASC)
LOGGING;
CREATE INDEX "AGDOI"."AGIN_UCOM_REF_AGENT_ID"
ON "AGDOI"."AG_LICENSE_T" ("UCOM_REF_AGENT_ID" ASC)
LOGGING;
CREATE INDEX "AGDOI"."AG_LICEN_T_EXP_DATE_INX"
ON "AGDOI"."AG_LICENSE_T" ("EXPIRE_DATE" ASC)
LOGGING;
CREATE INDEX "AGDOI"."AG_LICEN_T_LIC_DATE_INX"
ON "AGDOI"."AG_LICENSE_T" ("LICENSE_DATE" ASC)
LOGGING;

-- ----------------------------
-- Triggers structure for table AG_LICENSE_T
-- ----------------------------
CREATE OR REPLACE TRIGGER "AGDOI"."AG_DLG_AG_MAS_LICENSE_TRG" AFTER INSERT OR DELETE OR UPDATE ON "AGDOI"."AG_LICENSE_T" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
DECLARE
 V_NAMET   AS_COMPANY_T.COMP_NAMET%TYPE;
 V_PRE_NAME_CODE  AG_PERSONAL_T.PRE_NAME_CODE%TYPE;
 V_NAMES  AG_PERSONAL_T.NAMES%TYPE;
 V_LASTNAME  AG_PERSONAL_T.LASTNAME %TYPE;
 V_ID_CARD_NO  AG_PERSONAL_T.ID_CARD_NO%TYPE;
 V_LOCAL_ADDRESS1 AG_PERSONAL_T.LOCAL_ADDRESS1%TYPE;
 V_LOCAL_ADDRESS2 AG_PERSONAL_T.LOCAL_ADDRESS2%TYPE;
 V_LOCAL_AREA_CODE AG_PERSONAL_T.LOCAL_AREA_CODE%TYPE;
 V_LOCAL_ZIPCODE  AG_PERSONAL_T.LOCAL_ZIPCODE%TYPE;
 V_LOCAL_TELEPHONE AG_PERSONAL_T.LOCAL_TELEPHONE%TYPE;
 V_AGENT_TYPE  AG_LICENSE_TYPE_R.AGENT_TYPE%TYPE;
 V_INS_TYPE  AG_LICENSE_TYPE_R.INSURANCE_TYPE%TYPE;
BEGIN
    IF INSERTING or UPDATING THEN
 BEGIN
  SELECT     AGENT_TYPE, INSURANCE_TYPE
      INTO    V_AGENT_TYPE, V_INS_TYPE
      FROM     AG_LICENSE_TYPE_R
      WHERE  LICENSE_TYPE_CODE = :NEW.LICENSE_TYPE_CODE;
  EXCEPTION
    WHEN OTHERS THEN NULL;
 END;
    END IF;

    IF SUBSTR(:NEW.LICENSE_TYPE_CODE,1,1) <> '3' THEN
       IF INSERTING THEN
            BEGIN
                INSERT  INTO  DLG_AG_MAS (AGENT_ID
     ,AGENT_TYPE
     ,APP_DATE
     ,CANCEL_TYPE
     ,AGENT_CAT
     ,INSURE_CAT
     ,EXP_DATE)
                          VALUES (:NEW.LICENSE_NO
                          ,:NEW.LICENSE_TYPE_CODE
                          ,:NEW.DATE_LICENSE_ACT
                          ,:NEW.REVOKE_TYPE_CODE
                          ,V_AGENT_TYPE
                          ,V_INS_TYPE
                          ,:NEW.EXPIRE_DATE) ;
              EXCEPTION
                   WHEN OTHERS THEN NULL;
         END;
      ELSIF UPDATING  THEN
           BEGIN
             UPDATE  DLG_AG_MAS
                    SET   AGENT_ID      = :NEW.LICENSE_NO
  ,AGENT_TYPE  = :NEW.LICENSE_TYPE_CODE
  ,APP_DATE    = :NEW.DATE_LICENSE_ACT
  ,CANCEL_TYPE       = :NEW.REVOKE_TYPE_CODE
  ,AGENT_CAT = V_AGENT_TYPE
  ,INSURE_CAT       = V_INS_TYPE
  ,EXP_DATE              = :NEW.EXPIRE_DATE
              WHERE AGENT_ID       = :OLD.LICENSE_NO
                  AND AGENT_TYPE    = :OLD.LICENSE_TYPE_CODE ;
           EXCEPTION
            WHEN OTHERS THEN NULL;
           END;
      END IF;
   END IF;

   IF SUBSTR(:OLD.LICENSE_TYPE_CODE,1,1) <> '3' THEN
      IF DELETING  THEN
           BEGIN
    DELETE DLG_AG_MAS
    WHERE AGENT_ID    = :OLD.LICENSE_NO
          AND AGENT_TYPE     = :OLD.LICENSE_TYPE_CODE ;
          EXCEPTION
           WHEN OTHERS THEN NULL;
          END;
       END IF;
    END IF;
END;CREATE OR REPLACE TRIGGER "AGDOI"."AG_LICENSE_REP_TRG" BEFORE INSERT ON "AGDOI"."AG_LICENSE_T" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
BEGIN
  IF SUBSTR(:NEW.LICENSE_TYPE_CODE,1,1)='3' THEN
     :NEW.LICENSE_REP := SUBSTR(:NEW.LICENSE_NO,1,1)||
                         SUBSTR(:NEW.LICENSE_NO,INSTR(:NEW.LICENSE_NO,'/')+1)||
                         LPAD(SUBSTR(:NEW.LICENSE_NO,2,LENGTH(SUBSTR(:NEW.LICENSE_NO,1,INSTR(:NEW.LICENSE_NO,'/')-1))-1),5,'0');
  END IF;     
END;
CREATE OR REPLACE TRIGGER "AGDOI"."AG_LICENSE_REVOKE_TRG" BEFORE UPDATE ON "AGDOI"."AG_LICENSE_T" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
BEGIN
  -- ???????????????? ????????? user ??????????
  IF nvl(:OLD.revoke_type_code,' ') = nvl(:NEW.revoke_type_code,' ') and
     nvl(:OLD.revoke_type_code,' ') IN( 'A','C')                            then  -- ???????? update ??????????????
     IF :OLD.EXPIRE_DATE <> :NEW.EXPIRE_DATE then
        -- ????? update ?????????????  ???? ?????????? ??? new
        IF :NEW.EXPIRE_DATE > sysdate then
           :NEW.REVOKE_TYPE_CODE    := null;
           :NEW.REVOKE_LICENSE_DATE := null;
        END iF;
     ELSE
        -- ???????? update ?????????????  ???? ?????????? ??? OLD
        IF :OLD.EXPIRE_DATE > sysdate then
           :NEW.REVOKE_TYPE_CODE    := null;
           :NEW.REVOKE_LICENSE_DATE := null;
        END iF;
     END IF;
  END IF;
END;
CREATE OR REPLACE TRIGGER "AGDOI"."AG_LICENSE_TRG" BEFORE INSERT OR UPDATE ON "AGDOI"."AG_LICENSE_T" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
BEGIN
   :NEW.USER_ID := GET_SYS_USER;
   :NEW.USER_DATE := SYSDATE;
END;
CREATE OR REPLACE TRIGGER "AGDOI"."AG_LICENSE_UP_INCOMPAGENT_TRG" AFTER INSERT OR UPDATE ON "AGDOI"."AG_LICENSE_T" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
DECLARE
  v_flag    CHAR(1);
  v_oagent  AG_LICENSE_TYPE_R.AGENT_TYPE%TYPE;
  v_nagent  AG_LICENSE_TYPE_R.AGENT_TYPE%TYPE;
  v_oinsur  AG_LICENSE_TYPE_R.INSURANCE_TYPE%TYPE;
  v_ninsur  AG_LICENSE_TYPE_R.INSURANCE_TYPE%TYPE;
BEGIN
  /** ????????????????????????????? (LICENSE_TYPE_CODE)**/
  IF :OLD.LICENSE_TYPE_CODE <> :NEW.LICENSE_TYPE_CODE THEN
     ----- ????? :OLD.LICENSE_TYPE_CODE ???? : ?????? (AGENT)/??????? (BROKER)/???????????????? (JURISTIC)
     BEGIN
       SELECT AGENT_TYPE, INSURANCE_TYPE
       INTO   v_oagent  , v_oinsur
       FROM   AG_LICENSE_TYPE_R
       WHERE  LICENSE_TYPE_CODE = :OLD.LICENSE_TYPE_CODE;
     EXCEPTION WHEN OTHERS THEN v_oagent := NULL;
     END;
     ----- ????? :NEW.LICENSE_TYPE_CODE ???? : ?????? (AGENT)/??????? (BROKER)/???????????????? (JURISTIC)
     BEGIN
       SELECT AGENT_TYPE, INSURANCE_TYPE
       INTO   v_nagent  , v_ninsur
       FROM   AG_LICENSE_TYPE_R
       WHERE  LICENSE_TYPE_CODE = :NEW.LICENSE_TYPE_CODE;
     EXCEPTION WHEN OTHERS THEN v_nagent := NULL;
     END;
     ----- ?????????????????? ??????? (BROKER) ??????????????????????????????????????
     IF v_oagent = 'B' AND v_nagent = 'B' AND v_oinsur = v_ninsur THEN
        BEGIN
          SELECT 'T' INTO v_flag
          FROM   AG_PERSON_INCOMP_AGENT_T
          WHERE  LICENSE_NO = :OLD.LICENSE_NO;
        EXCEPTION
          WHEN TOO_MANY_ROWS THEN v_flag := 'T';
          WHEN NO_DATA_FOUND THEN v_flag := 'F';
          WHEN OTHERS        THEN v_flag := 'F';
        END;
        IF v_flag = 'T' THEN
           BEGIN
             UPDATE AG_PERSON_INCOMP_AGENT_T
             SET    LICENSE_TYPE_CODE = :NEW.LICENSE_TYPE_CODE
             WHERE  LICENSE_NO = :OLD.LICENSE_NO;
           EXCEPTION WHEN OTHERS THEN NULL;
           END;
        END IF;
     ----- ?????????????????? ???????????????? (JURISTIC) ??????????????????????????????????????
     ELSIF v_oagent = 'J' AND v_nagent = 'J' AND v_oinsur = v_ninsur THEN
        BEGIN
          SELECT 'T' INTO v_flag
          FROM   AG_PERSON_INCOMP_AGENT_T
          WHERE  COMP_LICENSE_NO = :OLD.LICENSE_NO;
        EXCEPTION
          WHEN TOO_MANY_ROWS THEN v_flag := 'T';
          WHEN NO_DATA_FOUND THEN v_flag := 'F';
          WHEN OTHERS        THEN v_flag := 'F';
        END;
        IF v_flag = 'T' THEN
           BEGIN
             UPDATE AG_PERSON_INCOMP_AGENT_T
             SET    COMP_LICENSE_TYPE = :NEW.LICENSE_TYPE_CODE
             WHERE  COMP_LICENSE_NO = :OLD.LICENSE_NO;
           EXCEPTION WHEN OTHERS THEN NULL;
           END;
        END IF;
     END IF;
  END IF;
END;

-- ----------------------------
-- Primary Key structure for table AG_LICENSE_T
-- ----------------------------
ALTER TABLE "AGDOI"."AG_LICENSE_T" ADD PRIMARY KEY ("LICENSE_NO");

-- ----------------------------
-- Foreign Key structure for table "AGDOI"."AG_LICENSE_T"
-- ----------------------------
ALTER TABLE "AGDOI"."AG_LICENSE_T" ADD FOREIGN KEY ("LICENSE_TYPE_CODE") REFERENCES "AGDOI"."AG_LICENSE_TYPE_R" ("LICENSE_TYPE_CODE");
ALTER TABLE "AGDOI"."AG_LICENSE_T" ADD FOREIGN KEY ("REVOKE_TYPE_CODE") REFERENCES "AGDOI"."AG_REVOKE_TYPE_R" ("REVOKE_TYPE_CODE");
