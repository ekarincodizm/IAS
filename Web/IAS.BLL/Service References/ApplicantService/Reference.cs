//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IAS.BLL.ApplicantService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ApplicantService.IApplicantService")]
    public interface IApplicantService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/Insert", ReplyAction="http://tempuri.org/IApplicantService/InsertResponse")]
        IAS.DTO.ResponseMessage<bool> Insert(IAS.DTO.Applicant appl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/Update", ReplyAction="http://tempuri.org/IApplicantService/UpdateResponse")]
        IAS.DTO.ResponseMessage<bool> Update(IAS.DTO.Applicant appl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetById", ReplyAction="http://tempuri.org/IApplicantService/GetByIdResponse")]
        IAS.DTO.ResponseService<IAS.DTO.Applicant> GetById(string Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/Delete", ReplyAction="http://tempuri.org/IApplicantService/DeleteResponse")]
        IAS.DTO.ResponseMessage<bool> Delete(string Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/InsertAndCheckApplicantGroupUpload", ReplyAction="http://tempuri.org/IApplicantService/InsertAndCheckApplicantGroupUploadResponse")]
        IAS.DTO.ResponseService<IAS.DTO.SummaryReceiveApplicant> InsertAndCheckApplicantGroupUpload(IAS.DTO.InsertAndCheckApplicantGroupUploadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/UpdateApplicantGroupUpload", ReplyAction="http://tempuri.org/IApplicantService/UpdateApplicantGroupUploadResponse")]
        IAS.DTO.ResponseMessage<bool> UpdateApplicantGroupUpload(IAS.DTO.ApplicantTemp exam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/ApplicantGroupUploadToSubmit", ReplyAction="http://tempuri.org/IApplicantService/ApplicantGroupUploadToSubmitResponse")]
        IAS.DTO.ResponseService<string> ApplicantGroupUploadToSubmit(string groupId, IAS.DTO.UserProfile userProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetApplicantByCriteria", ReplyAction="http://tempuri.org/IApplicantService/GetApplicantByCriteriaResponse")]
        IAS.DTO.ResponseService<System.Data.DataSet> GetApplicantByCriteria(
                    IAS.DTO.RegistrationType userRegType, 
                    string compCode, 
                    string idCard, 
                    string testingNo, 
                    string firstName, 
                    string lastName, 
                    System.Nullable<System.DateTime> startDate, 
                    System.Nullable<System.DateTime> toDate, 
                    string paymentNo, 
                    string billNo, 
                    int RowPerPage, 
                    int pageNum, 
                    bool Count, 
                    string license, 
                    string time, 
                    string examPlaceGroupCode, 
                    string examPlaceCode, 
                    string chequeNo, 
                    string examResult, 
                    System.Nullable<System.DateTime> startCandidates, 
                    System.Nullable<System.DateTime> endCandidates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetApplicantByCriteriaSendMail", ReplyAction="http://tempuri.org/IApplicantService/GetApplicantByCriteriaSendMailResponse")]
        IAS.DTO.ResponseService<string> GetApplicantByCriteriaSendMail(
                    IAS.DTO.RegistrationType userRegType, 
                    string compCode, 
                    string idCard, 
                    string testingNo, 
                    string firstName, 
                    string lastName, 
                    System.Nullable<System.DateTime> startDate, 
                    System.Nullable<System.DateTime> toDate, 
                    string paymentNo, 
                    string billNo, 
                    int RowPerPage, 
                    int pageNum, 
                    bool Count, 
                    string license, 
                    string time, 
                    string examPlaceGroupCode, 
                    string examPlaceCode, 
                    string chequeNo, 
                    string examResult, 
                    System.Nullable<System.DateTime> startCandidates, 
                    System.Nullable<System.DateTime> endCandidates, 
                    string address, 
                    string name, 
                    string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetApplicantById", ReplyAction="http://tempuri.org/IApplicantService/GetApplicantByIdResponse")]
        IAS.DTO.ResponseService<System.Data.DataSet> GetApplicantById(string applicantCode, string testingNo, string examPlaceCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetApplicantUploadTempById", ReplyAction="http://tempuri.org/IApplicantService/GetApplicantUploadTempByIdResponse")]
        IAS.DTO.ResponseService<IAS.DTO.ApplicantTemp> GetApplicantUploadTempById(string uploadGroupNo, string seqNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetApplicantGroupUploadByGroupUploadNo", ReplyAction="http://tempuri.org/IApplicantService/GetApplicantGroupUploadByGroupUploadNoRespon" +
            "se")]
        IAS.DTO.ResponseService<IAS.DTO.UploadResult<IAS.DTO.UploadHeader, IAS.DTO.ApplicantTemp>> GetApplicantGroupUploadByGroupUploadNo(string groupUploadNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/InsertSingleApplicant", ReplyAction="http://tempuri.org/IApplicantService/InsertSingleApplicantResponse")]
        IAS.DTO.ResponseService<string> InsertSingleApplicant(IAS.DTO.ApplicantTemp[] app, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetApplicantInfo", ReplyAction="http://tempuri.org/IApplicantService/GetApplicantInfoResponse")]
        IAS.DTO.ResponseService<IAS.DTO.ApplicantInfo> GetApplicantInfo(string applicantCode, string testingNo, string examPlaceCode, int RowPerPage, int num_page, bool Count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetRequestEditApplicant", ReplyAction="http://tempuri.org/IApplicantService/GetRequestEditApplicantResponse")]
        IAS.DTO.ResponseService<System.Data.DataSet> GetRequestEditApplicant(IAS.DTO.RegistrationType userRegType, string idCard, string testingNo, string CompCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetApplicantChangeMaxID", ReplyAction="http://tempuri.org/IApplicantService/GetApplicantChangeMaxIDResponse")]
        IAS.DTO.ResponseService<System.Data.DataSet> GetApplicantChangeMaxID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/InsertApplicantChange", ReplyAction="http://tempuri.org/IApplicantService/InsertApplicantChangeResponse")]
        IAS.DTO.ResponseMessage<bool> InsertApplicantChange(IAS.DTO.ApplicantChange appChange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetHistoryApplicant", ReplyAction="http://tempuri.org/IApplicantService/GetHistoryApplicantResponse")]
        IAS.DTO.ResponseService<System.Data.DataSet> GetHistoryApplicant(IAS.DTO.RegistrationType userRegType, string idCard, string testingNo, string CompCode, string ExamPlaceCode, string Status, int pageNo, int recordPerPage, bool Count, string Asso, string oic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetApplicantDetail", ReplyAction="http://tempuri.org/IApplicantService/GetApplicantDetailResponse")]
        IAS.DTO.ResponseService<IAS.DTO.Applicant> GetApplicantDetail(int applicantCode, string testingNo, string examPlaceCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetApproveEditApplicant", ReplyAction="http://tempuri.org/IApplicantService/GetApproveEditApplicantResponse")]
        IAS.DTO.ResponseService<System.Data.DataSet> GetApproveEditApplicant(IAS.DTO.RegistrationType userRegType, string idCard, string testingNo, string CompCode, string ExamPlaceCode, string Status, int pageNo, int recordPerPage, bool Count, string membertype, string Asso, string oic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetApplicantTLogMaxID", ReplyAction="http://tempuri.org/IApplicantService/GetApplicantTLogMaxIDResponse")]
        IAS.DTO.ResponseService<System.Data.DataSet> GetApplicantTLogMaxID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetApplicantTtoLog", ReplyAction="http://tempuri.org/IApplicantService/GetApplicantTtoLogResponse")]
        IAS.DTO.ResponseService<System.Data.DataSet> GetApplicantTtoLog(IAS.DTO.RegistrationType userRegType, string idCard, string testingNo, string CompCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/InsertApplicantTLog", ReplyAction="http://tempuri.org/IApplicantService/InsertApplicantTLogResponse")]
        IAS.DTO.ResponseMessage<bool> InsertApplicantTLog(IAS.DTO.ApplicantTLog appTLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/InsertAttrachFileApplicantChange", ReplyAction="http://tempuri.org/IApplicantService/InsertAttrachFileApplicantChangeResponse")]
        IAS.DTO.ResponseMessage<bool> InsertAttrachFileApplicantChange(IAS.DTO.AttachFileApplicantChange[] appAttachFileChange, IAS.DTO.UserProfile userProfile, IAS.DTO.ApplicantChange appChange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetAttachFileAppChange", ReplyAction="http://tempuri.org/IApplicantService/GetAttachFileAppChangeResponse")]
        IAS.DTO.ResponseService<System.Data.DataSet> GetAttachFileAppChange(IAS.DTO.RegistrationType userRegType, string changeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetAttatchFilesAppChangeByIDCard", ReplyAction="http://tempuri.org/IApplicantService/GetAttatchFilesAppChangeByIDCardResponse")]
        IAS.DTO.ResponseService<IAS.DTO.AttachFileApplicantChangeEntity[]> GetAttatchFilesAppChangeByIDCard(string idcard, int changeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetApproveAppForStatus", ReplyAction="http://tempuri.org/IApplicantService/GetApproveAppForStatusResponse")]
        IAS.DTO.ResponseService<System.Data.DataSet> GetApproveAppForStatus(IAS.DTO.RegistrationType userRegType, string idcard, string status, string asso, string oic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/SendMailAppChange", ReplyAction="http://tempuri.org/IApplicantService/SendMailAppChangeResponse")]
        IAS.DTO.ResponseMessage<bool> SendMailAppChange(string idcard, string TestingNo, string CompCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetCheckIDAppT", ReplyAction="http://tempuri.org/IApplicantService/GetCheckIDAppTResponse")]
        IAS.DTO.ResponseService<System.Data.DataSet> GetCheckIDAppT(string idcard, string TestingNo, string CompCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/getManageApplicantCourse", ReplyAction="http://tempuri.org/IApplicantService/getManageApplicantCourseResponse")]
        IAS.DTO.ResponseService<System.Data.DataSet> getManageApplicantCourse(string LicenseType, string StartExamDate, string EndExamDate, string Place, string PlaceName, string TimeExam, string TestingNO, int resultPage, int PAGE_SIZE, bool Count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetExamPlaceByLicenseAneOwner", ReplyAction="http://tempuri.org/IApplicantService/GetExamPlaceByLicenseAneOwnerResponse")]
        IAS.DTO.ResponseService<System.Data.DataSet> GetExamPlaceByLicenseAneOwner(string owner, string license);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetApplicantFromTestingNoForManageApplicant", ReplyAction="http://tempuri.org/IApplicantService/GetApplicantFromTestingNoForManageApplicantR" +
            "esponse")]
        IAS.DTO.ResponseService<System.Data.DataSet> GetApplicantFromTestingNoForManageApplicant(string TestingNo, string ConSQL, int resultPage, int PAGE_SIZE, bool Count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetExamRoomByTestingNoforManage", ReplyAction="http://tempuri.org/IApplicantService/GetExamRoomByTestingNoforManageResponse")]
        IAS.DTO.ResponseService<IAS.DTO.DataItem[]> GetExamRoomByTestingNoforManage(string testingNo, string PlaceCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/SaveExamAppRoom", ReplyAction="http://tempuri.org/IApplicantService/SaveExamAppRoomResponse")]
        IAS.DTO.ResponseMessage<bool> SaveExamAppRoom(string[] Manage_App, string room, string testingNo, string PaymentNo, bool AutoManage, string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/CancleExamApplicantManage", ReplyAction="http://tempuri.org/IApplicantService/CancleExamApplicantManageResponse")]
        IAS.DTO.ResponseMessage<bool> CancleExamApplicantManage(string[] Manage_App, string testingNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/AddtoDBRoom", ReplyAction="http://tempuri.org/IApplicantService/AddtoDBRoomResponse")]
        string AddtoDBRoom(string[] Manage_App, string room, string testingNo, string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/GetQuantityBillPerPageByConfig", ReplyAction="http://tempuri.org/IApplicantService/GetQuantityBillPerPageByConfigResponse")]
        string GetQuantityBillPerPageByConfig();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/CheckApplicantIsDuplicate", ReplyAction="http://tempuri.org/IApplicantService/CheckApplicantIsDuplicateResponse")]
        IAS.DTO.ResponseMessage<bool> CheckApplicantIsDuplicate(string TestingNo, string idcard, System.DateTime testTingDate, string testTimeCode, string examPlaceCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/CheckApplicantExamDup", ReplyAction="http://tempuri.org/IApplicantService/CheckApplicantExamDupResponse")]
        IAS.DTO.ResponseService<string[]> CheckApplicantExamDup(string idcard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/ValidateApplicantSingleBeforeSubmit", ReplyAction="http://tempuri.org/IApplicantService/ValidateApplicantSingleBeforeSubmitResponse")]
        IAS.DTO.ResponseMessage<bool> ValidateApplicantSingleBeforeSubmit(IAS.DTO.ValidateApplicantSingleBeforeSubmitRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/ValidateApplicantTestCenter", ReplyAction="http://tempuri.org/IApplicantService/ValidateApplicantTestCenterResponse")]
        IAS.DTO.ResponseMessage<bool> ValidateApplicantTestCenter(string TestingNo, string idcard, System.DateTime testTingDate, string testTimeCode, string examPlaceCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/IsPersonCanApplicant", ReplyAction="http://tempuri.org/IApplicantService/IsPersonCanApplicantResponse")]
        IAS.DTO.ResponseMessage<bool> IsPersonCanApplicant(IAS.DTO.IsPersonCanApplicantRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicantService/ValidateApplicantBeforeSaveList", ReplyAction="http://tempuri.org/IApplicantService/ValidateApplicantBeforeSaveListResponse")]
        IAS.DTO.ResultValidateApplicant ValidateApplicantBeforeSaveList(IAS.DTO.ValidateApplicantBeforeSaveListRequest request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IApplicantServiceChannel : IAS.BLL.ApplicantService.IApplicantService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ApplicantServiceClient : System.ServiceModel.ClientBase<IAS.BLL.ApplicantService.IApplicantService>, IAS.BLL.ApplicantService.IApplicantService {
        
        public ApplicantServiceClient() {
        }
        
        public ApplicantServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ApplicantServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicantServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicantServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public IAS.DTO.ResponseMessage<bool> Insert(IAS.DTO.Applicant appl) {
            return base.Channel.Insert(appl);
        }
        
        public IAS.DTO.ResponseMessage<bool> Update(IAS.DTO.Applicant appl) {
            return base.Channel.Update(appl);
        }
        
        public IAS.DTO.ResponseService<IAS.DTO.Applicant> GetById(string Id) {
            return base.Channel.GetById(Id);
        }
        
        public IAS.DTO.ResponseMessage<bool> Delete(string Id) {
            return base.Channel.Delete(Id);
        }
        
        public IAS.DTO.ResponseService<IAS.DTO.SummaryReceiveApplicant> InsertAndCheckApplicantGroupUpload(IAS.DTO.InsertAndCheckApplicantGroupUploadRequest request) {
            return base.Channel.InsertAndCheckApplicantGroupUpload(request);
        }
        
        public IAS.DTO.ResponseMessage<bool> UpdateApplicantGroupUpload(IAS.DTO.ApplicantTemp exam) {
            return base.Channel.UpdateApplicantGroupUpload(exam);
        }
        
        public IAS.DTO.ResponseService<string> ApplicantGroupUploadToSubmit(string groupId, IAS.DTO.UserProfile userProfile) {
            return base.Channel.ApplicantGroupUploadToSubmit(groupId, userProfile);
        }
        
        public IAS.DTO.ResponseService<System.Data.DataSet> GetApplicantByCriteria(
                    IAS.DTO.RegistrationType userRegType, 
                    string compCode, 
                    string idCard, 
                    string testingNo, 
                    string firstName, 
                    string lastName, 
                    System.Nullable<System.DateTime> startDate, 
                    System.Nullable<System.DateTime> toDate, 
                    string paymentNo, 
                    string billNo, 
                    int RowPerPage, 
                    int pageNum, 
                    bool Count, 
                    string license, 
                    string time, 
                    string examPlaceGroupCode, 
                    string examPlaceCode, 
                    string chequeNo, 
                    string examResult, 
                    System.Nullable<System.DateTime> startCandidates, 
                    System.Nullable<System.DateTime> endCandidates) {
            return base.Channel.GetApplicantByCriteria(userRegType, compCode, idCard, testingNo, firstName, lastName, startDate, toDate, paymentNo, billNo, RowPerPage, pageNum, Count, license, time, examPlaceGroupCode, examPlaceCode, chequeNo, examResult, startCandidates, endCandidates);
        }
        
        public IAS.DTO.ResponseService<string> GetApplicantByCriteriaSendMail(
                    IAS.DTO.RegistrationType userRegType, 
                    string compCode, 
                    string idCard, 
                    string testingNo, 
                    string firstName, 
                    string lastName, 
                    System.Nullable<System.DateTime> startDate, 
                    System.Nullable<System.DateTime> toDate, 
                    string paymentNo, 
                    string billNo, 
                    int RowPerPage, 
                    int pageNum, 
                    bool Count, 
                    string license, 
                    string time, 
                    string examPlaceGroupCode, 
                    string examPlaceCode, 
                    string chequeNo, 
                    string examResult, 
                    System.Nullable<System.DateTime> startCandidates, 
                    System.Nullable<System.DateTime> endCandidates, 
                    string address, 
                    string name, 
                    string email) {
            return base.Channel.GetApplicantByCriteriaSendMail(userRegType, compCode, idCard, testingNo, firstName, lastName, startDate, toDate, paymentNo, billNo, RowPerPage, pageNum, Count, license, time, examPlaceGroupCode, examPlaceCode, chequeNo, examResult, startCandidates, endCandidates, address, name, email);
        }
        
        public IAS.DTO.ResponseService<System.Data.DataSet> GetApplicantById(string applicantCode, string testingNo, string examPlaceCode) {
            return base.Channel.GetApplicantById(applicantCode, testingNo, examPlaceCode);
        }
        
        public IAS.DTO.ResponseService<IAS.DTO.ApplicantTemp> GetApplicantUploadTempById(string uploadGroupNo, string seqNo) {
            return base.Channel.GetApplicantUploadTempById(uploadGroupNo, seqNo);
        }
        
        public IAS.DTO.ResponseService<IAS.DTO.UploadResult<IAS.DTO.UploadHeader, IAS.DTO.ApplicantTemp>> GetApplicantGroupUploadByGroupUploadNo(string groupUploadNo) {
            return base.Channel.GetApplicantGroupUploadByGroupUploadNo(groupUploadNo);
        }
        
        public IAS.DTO.ResponseService<string> InsertSingleApplicant(IAS.DTO.ApplicantTemp[] app, string userId) {
            return base.Channel.InsertSingleApplicant(app, userId);
        }
        
        public IAS.DTO.ResponseService<IAS.DTO.ApplicantInfo> GetApplicantInfo(string applicantCode, string testingNo, string examPlaceCode, int RowPerPage, int num_page, bool Count) {
            return base.Channel.GetApplicantInfo(applicantCode, testingNo, examPlaceCode, RowPerPage, num_page, Count);
        }
        
        public IAS.DTO.ResponseService<System.Data.DataSet> GetRequestEditApplicant(IAS.DTO.RegistrationType userRegType, string idCard, string testingNo, string CompCode) {
            return base.Channel.GetRequestEditApplicant(userRegType, idCard, testingNo, CompCode);
        }
        
        public IAS.DTO.ResponseService<System.Data.DataSet> GetApplicantChangeMaxID() {
            return base.Channel.GetApplicantChangeMaxID();
        }
        
        public IAS.DTO.ResponseMessage<bool> InsertApplicantChange(IAS.DTO.ApplicantChange appChange) {
            return base.Channel.InsertApplicantChange(appChange);
        }
        
        public IAS.DTO.ResponseService<System.Data.DataSet> GetHistoryApplicant(IAS.DTO.RegistrationType userRegType, string idCard, string testingNo, string CompCode, string ExamPlaceCode, string Status, int pageNo, int recordPerPage, bool Count, string Asso, string oic) {
            return base.Channel.GetHistoryApplicant(userRegType, idCard, testingNo, CompCode, ExamPlaceCode, Status, pageNo, recordPerPage, Count, Asso, oic);
        }
        
        public IAS.DTO.ResponseService<IAS.DTO.Applicant> GetApplicantDetail(int applicantCode, string testingNo, string examPlaceCode) {
            return base.Channel.GetApplicantDetail(applicantCode, testingNo, examPlaceCode);
        }
        
        public IAS.DTO.ResponseService<System.Data.DataSet> GetApproveEditApplicant(IAS.DTO.RegistrationType userRegType, string idCard, string testingNo, string CompCode, string ExamPlaceCode, string Status, int pageNo, int recordPerPage, bool Count, string membertype, string Asso, string oic) {
            return base.Channel.GetApproveEditApplicant(userRegType, idCard, testingNo, CompCode, ExamPlaceCode, Status, pageNo, recordPerPage, Count, membertype, Asso, oic);
        }
        
        public IAS.DTO.ResponseService<System.Data.DataSet> GetApplicantTLogMaxID() {
            return base.Channel.GetApplicantTLogMaxID();
        }
        
        public IAS.DTO.ResponseService<System.Data.DataSet> GetApplicantTtoLog(IAS.DTO.RegistrationType userRegType, string idCard, string testingNo, string CompCode) {
            return base.Channel.GetApplicantTtoLog(userRegType, idCard, testingNo, CompCode);
        }
        
        public IAS.DTO.ResponseMessage<bool> InsertApplicantTLog(IAS.DTO.ApplicantTLog appTLog) {
            return base.Channel.InsertApplicantTLog(appTLog);
        }
        
        public IAS.DTO.ResponseMessage<bool> InsertAttrachFileApplicantChange(IAS.DTO.AttachFileApplicantChange[] appAttachFileChange, IAS.DTO.UserProfile userProfile, IAS.DTO.ApplicantChange appChange) {
            return base.Channel.InsertAttrachFileApplicantChange(appAttachFileChange, userProfile, appChange);
        }
        
        public IAS.DTO.ResponseService<System.Data.DataSet> GetAttachFileAppChange(IAS.DTO.RegistrationType userRegType, string changeid) {
            return base.Channel.GetAttachFileAppChange(userRegType, changeid);
        }
        
        public IAS.DTO.ResponseService<IAS.DTO.AttachFileApplicantChangeEntity[]> GetAttatchFilesAppChangeByIDCard(string idcard, int changeid) {
            return base.Channel.GetAttatchFilesAppChangeByIDCard(idcard, changeid);
        }
        
        public IAS.DTO.ResponseService<System.Data.DataSet> GetApproveAppForStatus(IAS.DTO.RegistrationType userRegType, string idcard, string status, string asso, string oic) {
            return base.Channel.GetApproveAppForStatus(userRegType, idcard, status, asso, oic);
        }
        
        public IAS.DTO.ResponseMessage<bool> SendMailAppChange(string idcard, string TestingNo, string CompCode) {
            return base.Channel.SendMailAppChange(idcard, TestingNo, CompCode);
        }
        
        public IAS.DTO.ResponseService<System.Data.DataSet> GetCheckIDAppT(string idcard, string TestingNo, string CompCode) {
            return base.Channel.GetCheckIDAppT(idcard, TestingNo, CompCode);
        }
        
        public IAS.DTO.ResponseService<System.Data.DataSet> getManageApplicantCourse(string LicenseType, string StartExamDate, string EndExamDate, string Place, string PlaceName, string TimeExam, string TestingNO, int resultPage, int PAGE_SIZE, bool Count) {
            return base.Channel.getManageApplicantCourse(LicenseType, StartExamDate, EndExamDate, Place, PlaceName, TimeExam, TestingNO, resultPage, PAGE_SIZE, Count);
        }
        
        public IAS.DTO.ResponseService<System.Data.DataSet> GetExamPlaceByLicenseAneOwner(string owner, string license) {
            return base.Channel.GetExamPlaceByLicenseAneOwner(owner, license);
        }
        
        public IAS.DTO.ResponseService<System.Data.DataSet> GetApplicantFromTestingNoForManageApplicant(string TestingNo, string ConSQL, int resultPage, int PAGE_SIZE, bool Count) {
            return base.Channel.GetApplicantFromTestingNoForManageApplicant(TestingNo, ConSQL, resultPage, PAGE_SIZE, Count);
        }
        
        public IAS.DTO.ResponseService<IAS.DTO.DataItem[]> GetExamRoomByTestingNoforManage(string testingNo, string PlaceCode) {
            return base.Channel.GetExamRoomByTestingNoforManage(testingNo, PlaceCode);
        }
        
        public IAS.DTO.ResponseMessage<bool> SaveExamAppRoom(string[] Manage_App, string room, string testingNo, string PaymentNo, bool AutoManage, string UserId) {
            return base.Channel.SaveExamAppRoom(Manage_App, room, testingNo, PaymentNo, AutoManage, UserId);
        }
        
        public IAS.DTO.ResponseMessage<bool> CancleExamApplicantManage(string[] Manage_App, string testingNo) {
            return base.Channel.CancleExamApplicantManage(Manage_App, testingNo);
        }
        
        public string AddtoDBRoom(string[] Manage_App, string room, string testingNo, string UserId) {
            return base.Channel.AddtoDBRoom(Manage_App, room, testingNo, UserId);
        }
        
        public string GetQuantityBillPerPageByConfig() {
            return base.Channel.GetQuantityBillPerPageByConfig();
        }
        
        public IAS.DTO.ResponseMessage<bool> CheckApplicantIsDuplicate(string TestingNo, string idcard, System.DateTime testTingDate, string testTimeCode, string examPlaceCode) {
            return base.Channel.CheckApplicantIsDuplicate(TestingNo, idcard, testTingDate, testTimeCode, examPlaceCode);
        }
        
        public IAS.DTO.ResponseService<string[]> CheckApplicantExamDup(string idcard) {
            return base.Channel.CheckApplicantExamDup(idcard);
        }
        
        public IAS.DTO.ResponseMessage<bool> ValidateApplicantSingleBeforeSubmit(IAS.DTO.ValidateApplicantSingleBeforeSubmitRequest request) {
            return base.Channel.ValidateApplicantSingleBeforeSubmit(request);
        }
        
        public IAS.DTO.ResponseMessage<bool> ValidateApplicantTestCenter(string TestingNo, string idcard, System.DateTime testTingDate, string testTimeCode, string examPlaceCode) {
            return base.Channel.ValidateApplicantTestCenter(TestingNo, idcard, testTingDate, testTimeCode, examPlaceCode);
        }
        
        public IAS.DTO.ResponseMessage<bool> IsPersonCanApplicant(IAS.DTO.IsPersonCanApplicantRequest request) {
            return base.Channel.IsPersonCanApplicant(request);
        }
        
        public IAS.DTO.ResultValidateApplicant ValidateApplicantBeforeSaveList(IAS.DTO.ValidateApplicantBeforeSaveListRequest request) {
            return base.Channel.ValidateApplicantBeforeSaveList(request);
        }
    }
}
